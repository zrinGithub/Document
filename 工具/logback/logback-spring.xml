<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">

	<contextName>project_name</contextName>
	<!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
	<property name="log.path" value="logs" />
	<property name="app.name" value="app-name" />

	<!-- 彩色日志 -->
	<!-- 颜色设置：[%highlight 高亮色]、[%black 黑色]、[%red 红色]、[%green 绿色]、[%yellow 黄色] 
		、[%blue 蓝色] 、[%magenta 洋红色] 、[%cyan 青色]、[%white 白色]、[%gray 灰色] 、[%boldRed 
		粗红色]、[%boldGreen 粗绿色] 、[%boldYellow 粗黄色] 、[%boldBlue 粗蓝色] 、[%boldMagenta 
		粗洋红色] 、[%boldCyan 粗青色] 、[%boldWhite 粗白色] -->

	<property name="CONSOLE_LOG_LOG_PATTERN"
		value="%blue(%date{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %magenta([%-5level]) %highlight([%replace(%caller{1}){'\t|Caller.{1}0| 
		at|\r\n', ''}]) %boldMagenta(%msg) %n" />
	<!-- <property name="CONSOLE_LOG_LOG_PATTERN" value="%blue(%date{yyyy-MM-dd 
		HH:mm:ss.SSS}) %green([%thread]) %magenta([%-5level]) %highlight([%logger{36}.%M-%line]) 
		%boldMagenta(%msg) %n" /> -->

	<!--输出到控制台 -->
	<appender name="CONSOLE_LOG"
		class="ch.qos.logback.core.CONSOLE_LOGAppender">
		<!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
		<encoder>
			<Pattern>${CONSOLE_LOG_LOG_PATTERN}</Pattern>
			<!-- 设置字符集 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>


	<!--输出到文件 -->

	<!-- 时间滚动输出 level为 DEBUG 日志 -->
	<appender name="DEBUG_LOG"
		class="ch.qos.logback.core.FileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/${app.name}_debug.log</file>
		<!-- 不追加(每次应用启动清空日志)方式记录日志 -->
		<append>false</append>
		<!--日志文件输出格式 -->
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-4relative [%t] [%-5level] [%logger{36}.%M-%line] - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 设置字符集 -->
			<immediateFlush>true</immediateFlush>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 INFO 日志 -->
	<appender name="INFO_LOG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/${app.name}_info.log</file>
		<!--日志文件输出格式 -->
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-4relative [%t] %-5level %logger{35} - %msg%n</pattern>
			<charset>UTF-8</charset>
			<immediateFlush>true</immediateFlush>
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每天日志归档路径以及格式 -->
			<fileNamePattern>${log.path}/info/${app.name}-info-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录info及以上级别的 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 WARN 日志 -->
	<appender name="WARN_LOG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/${app.name}_warn.log</file>
		<!--日志文件输出格式 -->
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss,SSS} %-4relative [%t] %-5level %logger{35} - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
			<immediateFlush>true</immediateFlush>
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/warn/${app.name}-warn-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录warn级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>


	<!-- 时间滚动输出 level为 ERROR 日志 -->
	<appender name="ERROR_LOG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/${app.name}_error.log</file>
		<!--日志文件输出格式 -->
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss,SSS} %-4relative [%t] %-5level %logger{35} - %msg%n</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
			<immediateFlush>true</immediateFlush>
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/error/${app.name}-error-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数 -->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录ERROR级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、 以及指定<appender>。<logger>仅有一个name属性， 
		一个可选的level和一个可选的addtivity属性。 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, 
		DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 
		如果未设置此属性，那么当前logger将会继承上级的级别。 addtivity:是否向上级logger传递打印信息。默认是true。 -->
	<!--<logger name="org.springframework.web" level="info"/> -->
	<!--<logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" 
		level="INFO"/> -->
	<!-- 使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作： 
		第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息 
		第二种就是单独给dao下目录配置debug模式，这样配置sql语句会打印，其他还是正常info级别： -->


	<!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE, 
		DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 不能设置为INHERITED或者同义词NULL。默认是DEBUG 可以包含零个或多个元素，标识这个appender将会添加到这个logger。 -->




	<springProfile name="dev">
		<logger name="com.zr.package" level="DEBUG"
			additivity="false">
			<appender-ref ref="CONSOLE_LOG" />
			<appender-ref ref="DEBUG_LOG" />
			<appender-ref ref="INFO_LOG" />
			<appender-ref ref="ERROR_LOG" />
			<appender-ref ref="WARN_LOG" />
		</logger>
		<logger name="org.springframework" level="INFO">
			<appender-ref ref="CONSOLE_LOG" />
			<appender-ref ref="DEBUG_LOG" />
			<appender-ref ref="INFO_LOG" />
			<appender-ref ref="ERROR_LOG" />
			<appender-ref ref="WARN_LOG" />
		</logger>
	</springProfile>
	<springProfile name="test">
		<logger name="com.zr.package" level="DEBUG"
			additivity="false">
			<appender-ref ref="DEBUG_LOG" />
			<appender-ref ref="INFO_LOG" />
			<appender-ref ref="WARN_LOG" />
			<appender-ref ref="ERROR_LOG" />
		</logger>
		<logger name="org.springframework" level="INFO">
			<appender-ref ref="DEBUG_LOG" />
			<appender-ref ref="INFO_LOG" />
			<appender-ref ref="ERROR_LOG" />
			<appender-ref ref="WARN_LOG" />
		</logger>
	</springProfile>
	<springProfile name="prd">
		<logger name="com.zr.package" level="INFO"
			additivity="false">
			<appender-ref ref="INFO_LOG" />
			<appender-ref ref="WARN_LOG" />
			<appender-ref ref="ERROR_LOG" />
		</logger>
		<logger name="org.springframework" level="INFO">
			<appender-ref ref="DEBUG_LOG" />
			<appender-ref ref="INFO_LOG" />
			<appender-ref ref="ERROR_LOG" />
			<appender-ref ref="WARN_LOG" />
		</logger>
	</springProfile>

</configuration>